/*
 * Cashregister project
 * ===========================
 * File Path : Productdatabase.c
 * Author : M.W.Richardson
 * Date : 19/04/21
 * Copyright : (c) 2021 Liverpool Data Research Associates
 */
/*"LDRA_OPEN   D:\AzureDevOps\Cashregister_6.0\Source\Types.h "*/
/*
 * Cashregister project
 * ===========================
 * File Path : Types.h
 * Author : M.W.Richardson
 * Date : 19/04/21
 * Copyright : (c) 2021 Liverpool Data Research Associates
 */
#ifndef TYPES_H
#define TYPES_H
#include <stdint.h>
/* 32bit float */
typedef float float32_t;
/* plain 8 bit character */
typedef char char_t;
/* pointer to plain 8 bit character */
typedef char* char_pt;
/* pointer to const plain 8 bit character */
typedef const char* const_char_pt;
#endif
/*"LDRA_CLOSE Include File"*/
/*"LDRA_OPEN   D:\AzureDevOps\Cashregister_6.0\Source\Countedproduct.h "*/
/*
 * Cashregister project
 * ===========================
 * File Path : Countedproduct.h
 * Author : M.W.Richardson
 * Date : 19/04/21
 * Copyright : (c) 2021 Liverpool Data Research Associates
 */
#ifndef COUNTEDPRODUCT_H
#define COUNTEDPRODUCT_H
/*"LDRA_OPEN   D:\AzureDevOps\Cashregister_6.0\Source\Product.h "*/
/*
 * Cashregister project
 * ===========================
 * File Path : Product.h
 * Author : M.W.Richardson
 * Date : 19/04/21
 * Copyright : (c) 2021 Liverpool Data Research Associates
 */
#ifndef PRODUCT_H
#define PRODUCT_H
/*"LDRA_OPEN   D:\AzureDevOps\Cashregister_6.0\Source\Specialoffer.h "*/
/*
 * Cashregister project
 * ===========================
 * File Path : Specialoffer.h
 * Author : M.W.Richardson
 * Date : 19/04/21
 * Copyright : (c) 2021 Liverpool Data Research Associates
 */
#ifndef SPECIALOFFER_H
#define SPECIALOFFER_H
/* Various types of Special Offers available */
typedef enum {
   NO_OFFER, BUY_ONE_GET_ONE_FREE, TEN_PERCENT_OFF, THREE_FOR_ONE_EURO
} tSpecialoffer;
extern uint32_t Specialoffer_getPrice(const uint32_t aQuantity,
 const uint32_t aUnitPrice, const tSpecialoffer anOffer);
#endif
/*"LDRA_CLOSE Include File"*/
struct Product {
  char_pt name;
  uint32_t barcode;
  uint32_t unitPrice;
  tSpecialoffer specialOffer;
};
#endif
/*"LDRA_CLOSE Include File"*/
struct CountedProduct {
  const struct Product* itsProduct;
  uint32_t count;
};
#endif
/*"LDRA_CLOSE Include File"*/
/*"LDRA_OPEN   D:\AzureDevOps\Cashregister_6.0\Source\Productdatabase.h "*/
/*
 * Cashregister project
 * ===========================
 * File Path : Productdatabase.h
 * Author : M.W.Richardson
 * Date : 19/04/21
 * Copyright : (c) 2021 Liverpool Data Research Associates
 */
#ifndef PRODUCTDATABASE_H
#define PRODUCTDATABASE_H
#define MAX_PRODUCTS 6U
extern const struct Product* Productdatabase_getProduct(const uint32_t bCode);
extern struct CountedProduct* Productdatabase_getCountedProduct(const struct Product* bProduct);
extern struct CountedProduct* Productdatabase_getSpecificCountedProduct(const uint32_t anIndex);
extern void Productdatabase_resetCountedProducts(void);
#endif
/*"LDRA_CLOSE Include File"*/
#define NULL_POINTER ((void*)0)
static struct Product ProductList[MAX_PRODUCTS] = { 
  { "Coconuts", 12345U, 180U, TEN_PERCENT_OFF }, 
  { "Lychees", 12346U, 250U, NO_OFFER }, 
  { "Kiwis", 12347U, 50U, THREE_FOR_ONE_EURO }, 
  { "Pears", 12348U, 100U, NO_OFFER }, 
  { "Pomegranates", 12349U, 199U, BUY_ONE_GET_ONE_FREE }, 
  { "Watermelons", 12350U, 350U, NO_OFFER } 
};
static struct CountedProduct CountedProductList[MAX_PRODUCTS] = { 
  { &ProductList[0], 0U }, { &ProductList[1], 0U }, { &ProductList[2], 0U }, 
  { &ProductList[3], 0U }, { &ProductList[4], 0U }, { &ProductList[5], 0U }
};
/*LDRA_HEADER_END */
/*
 * Get the product given the barcode
 * If no product exists, then return null
 */
const struct Product* Productdatabase_getProduct(const uint32_t bCode) {
  uint32_t pIter = 0U;
  struct Product* theProduct = NULL_POINTER;
  while (pIter < MAX_PRODUCTS) {
    if (ProductList[pIter].barcode == bCode) {
      theProduct = &ProductList[pIter];
      pIter = MAX_PRODUCTS;
    } else {
      pIter++;
    }
  }
  return theProduct;
}
/*
 * Get the counted product given a product
 * If no counted product exists, then return null
 */
struct CountedProduct* Productdatabase_getCountedProduct(const struct Product* bProduct) {
  uint32_t cpIter;
  struct CountedProduct* theCountedProduct = NULL_POINTER;
  if (bProduct != NULL_POINTER) {
    cpIter = 0U;
    while (cpIter < MAX_PRODUCTS) {
      if (CountedProductList[cpIter].itsProduct->barcode == bProduct->barcode) {
        theCountedProduct = &CountedProductList[cpIter];
        cpIter = MAX_PRODUCTS;
      } else {
        cpIter++;
      }
    }
  }
  return theCountedProduct;
}
/*
 * Get the counted product given an index
 * If index is out of range, then return null
 */
struct CountedProduct* Productdatabase_getSpecificCountedProduct(const uint32_t anIndex) {
  struct CountedProduct* theCP;
  if (anIndex < MAX_PRODUCTS) {
    theCP = &CountedProductList[anIndex];
  } else {
    theCP = NULL_POINTER;
  }
  return theCP;
}
/*
 * Initalise count of all counted products to zero
 */
void Productdatabase_resetCountedProducts(void) {
  uint32_t iCP;
  for (iCP = 0U; iCP < MAX_PRODUCTS; iCP++) {
    CountedProductList[iCP].count = 0U;
  }
}
